/*
 * This variable contains a reference to the actual row that contains the textfields
 */
var actualFirstRow = null;
/*
 * This variable contains a reference to the actual row that contains the comboboxes
 */
var actualSecondRow = null;
/*
 * This variable contains the actual textfield to search classes 
 */
var actualTextClasses = null;
/*
 * This variable contains the actual textfield to search properties 
 */
var actualTextProperties = null;
/*
 * This contains the reference to actual column of selector to add a selector
 */
var actualColSelector = null;
/*
 * This variable contains the actual element to select the value of the actual property
 */
var actualSelector = null;
/*
 * This variable contains the actual combobox to select a class 
 */
var actualComboClasses = null;
/*
 * This variable contains the actual combobox to select a property 
 */
var actualComboProperties = null;
/*
 * This variable contains the actual bt to add new sentences to the query
 */
var actualBtAdd = null;
/*
 * This variable contains the last selector obtained from wesearch
 */
var lastSelector = null;
/*
 * This variable contains the last query generated by wesearch
 */
var lastQuery = null;

function refresh() {
	location.reload();
}

/*
 * This function has to extract the value introduce by the user in the 
 * classes' textfield and ask to wesearch for matters with this value
 */
function searchClasses() {
	var stem = $(actualTextClasses).val();
	console.log('Text: ' + stem);
	getMatters(stem, $('#example').val());
}

/*
 * This function has to extract the value introduce by the user in the 
 * properties' textfield and ask to wesearch for properties with this value
 */
function searchProperties() {
	var stem = $(actualTextProperties).val();
	console.log('Text: ' + stem);
	var matter = $(actualComboClasses).val();
	console.log('Matter: ' + matter);
	getProperties(matter, stem, $('#example').val());
}

/*
 * This function has to extract the class and the property selected by the user in the comboboxes
 * and ask to wesearch for the valueselector
 
function obtainSelector() {
	var matter = $('.possible-classes').val();
	console.log('Class selected: ' + matter);
	var property = $('.possible-properties').val();
	console.log('Property selected: ' + property);
	getValueSelector(matter, property, $('#example').val());
}*/

/*
 * This function has to extract the class selected by the user in the combobox
 * and charge all its properties in the properties' combo
 */
function changeProperties() {
	var matter = actualComboClasses.val();
	getProperties(matter, '', $('#example').val());
}

/*
 * This function has to add one button to add more clauses to query
 */
function addMoreButtons() {
	var td = $('<td />');
	var button = $('<button onclick="addClauses(this)" >Add new clauses</button>');
	td.append(button);
	actualSecondRow.append(td);
}

function addClauses(button) {
	var row = createFirstRow();
	$('#clauses').append(row);
	$(button).attr("disabled", "disabled");
}

/*
 * This function has to extract all values neccesaries to
 * build a query
 */
function create() {
	var matter = actualComboClasses.val();
	console.log('Class selected: ' + matter);
	var property = actualComboProperties.val();
	console.log('Property selected: ' + property);
	var value = actualSelector.val();
	lastSelector['value'] = value;
	var selector = JSON.stringify(lastSelector);
	console.log('Selector: ' + selector);
	if(lastQuery == null) {
		createQuery(matter, property, selector, $('#example').val());
	} else {
		combineQuery(matter, property, selector, JSON.stringify(lastQuery), $('#example').val());
	}	
}

/*
 * This function has to show the button to create and show the query
 
function showButtons() {
	var bt_show = $('#bt_show');
	bt_show.show();
}*/

/*
 * This function ask wesearch to execute a query
 */
function executeQuery() {
	var queryStr = lastQuery['query'];
	search(queryStr, $('#example').val());
}
/*
 * This function fill a given dropdown with the options returned by the 
 * call to wesearch
 */
function fillDropdowns(combo, data) {
	$(data).each(function() {
		var option = $('<option />');
		option.attr('value', JSON.stringify(this)).text(this.label);
		
		combo.append(option);
	});
}

/*
 * This function creates and adds a new class selector
 */
function createClassesDropdown(data) {
	//var row = createSecondRow();
	actualSecondRow.empty();
	var column = $('<td />');
	var combo = actualComboClasses = $('<select />');
	combo.change(changeClass);
	//combo.blur(changeClass);
	fillDropdowns(combo, data);
	column.append(combo);
	actualSecondRow.append(column);
	var secondColumn = $('<td />');
	var button = $('<button onclick="searchProperties()">Search</button>');
	secondColumn.append(button);
	actualSecondRow.append(secondColumn);
	//row.append(column)
	//$('#clauses').append(row);
} 

/*
 * This function is called when a class is selected in the dropdown
 */
function changeClass() {
	getProperties($(this).val(), '', $('#example').val());
}

/*
 * This function creates and adds a new property selector
 */
function createPropertyDropdown(data) {
	$(actualSecondRow).find(':last-child').last().remove();
	var column = $(actualSecondRow).find(':last-child').last();
	//var column = $('<td />');
	var combo = actualComboProperties = $('<select />');
	fillDropdowns(combo, data);
	column.append(combo);
	actualSecondRow.append(column);
	combo.change(changeProperty);
	$('#clauses').append(actualSecondRow);
	if($(combo).children('option').length == 1) {
		changeProperty();
	}
}

function changeProperty() {
	$('<button/>')
	getValueSelector(actualComboClasses.val(),
			actualComboProperties.val(),
			$('#example').val());
}

/*
 * This function has to add a textfield to introduce the value for a property
 */
function addTextfield() {
	var td = $('<td />');
	actualSelector = $('<input type="text" placeholder="Introduce a value..."/>');
	td.append(actualSelector);
	actualFirstRow.append(td);
	var button = $('<button onclick="create()">Generate query</button>');
	var tdSelector = $('<td/>');
	tdSelector.append(button);
	actualSecondRow.append(tdSelector);
	//showButtons();
}

/*
 * This function has to add a combobox to select one value for a object property
 */
function addCombobox() {
	var td = $('<td />');
	var combo = $('<select></select>'); 
	var classes = (lastSelector['value'])['value'];
	$(classes).each(function () {
		var option = $('<option />')
		option.attr('value', JSON.stringify(this)).text(this.label);
		
		combo.append(option);
	});
	combo.change(changeSelector);
	td.append(combo);
	actualFirstRow.append(td);
}

function changeSelector() {
	actualSelector = $(this);
	if(lastQuery == null) {
		createQuery($(actualComboClasses).val(),
			$(actualComboProperties).val(),
			JSON.stringify(lastSelector),
			$('#example').val());
	} else {
		combineQuery($(actualComboClasses).val(),
			$(actualComboProperties).val(),
			JSON.stringify(lastSelector),
			JSON.stringify(lastQuery),
			$('#example').val());
	}
	var row1 = createFirstRow();
	var row2 = createSecondRow();
	$('#clauses').append(row1);
	$('#clauses').append(row2);
	createClassesDropdown(lastSelector['value']['value']);
	var actualValue = $(actualSelector).val();
	console.log('Actual value: ' + actualValue);
	$(actualComboClasses).val(actualValue);
	//$(actualComboClasses).trigger('change', [actualValue]);
	//getProperties(actualValue, '', $('#example').val());
}

/*
 * This function has to add to the table a new input to the introduce the value
 * of a property
 */
function addSelectorInput(selector) {
	var type = selector['type'];
	console.log('Type: ' + type);
	switch (type) {
		case 'textfield':
			addTextfield();
		break;
		case 'numeric':
			addTextfield();
		break;
		case 'undefined':
			addTextfield();
		break;
		case 'object':
			addCombobox();
		break;
	}
}

/*
 * This function has to show the query generated in the text area
 */
function showQuery(query) {
	var textarea = $('#queryText');
	textarea.empty();
	textarea.text(query);
	var btExecute= $('#bt_execute');
	btExecute.show();
}

/*
 * This function has to add 2 new rows to the table
 */
function addClauseRows() {
	var table = $('#clauses');
	console.log('Table: ' + table);
	var row1 = createFirstRow();
	table.append(row1);	
}

function createSecondRow() {
	var tr = $('<tr />');
	var td = $('<td />');
	var button = $('<button onclick="searchClasses()">Search</button>');
	td.append(button);
	tr.append(td);
	actualSecondRow = tr;
	return tr;
}

/*
 * This function has to add the firs row that contains the textfield to search classes and properties
 */
function createFirstRow() {
	var tr = $('<tr />');
	var column1 = addFirstColumn();
	var column2 = addSecondColumn();
	tr.append(column1);
	tr.append(column2);
	actualFirstRow = tr;
	return tr;
}

function addFirstColumn() {
	var td = $('<td />');
	//var input = $('<input type="text" class="classes" onchange="searchClasses()" />');
	var input = $('<input type="text" class="classes" placeholder="Introduce text..." />');
	actualTextClasses = input;
	td.append(input);
	return td;
}

function addSecondColumn() {
	var td = $('<td />');
	//var input = $('<input type="text" class="properties" onchange="searchProperties()" />');
	var input = $('<input type="text" class="properties"  placeholder="Introduce text..."/>');
	actualTextProperties = input;
	td.append(input);
	return td;
}

function showResults(results) {
	console.log('Show results: ' + JSON.stringify(results));
	var body = $('body');
	var h2 = $('<h2 class="results"/>').text('Results');
	body.append(h2);
	var list = $('<ul/>');
	for(var i = 0; i < results.length; i++) {
		var element = $('<li class="results"> <a href="' + results[i] + '">' + results[i] + '</a> </li>');
		list.append(element);
	}
	var div = $('<div/>');
	div.append(list);
	body.append(div);
}
