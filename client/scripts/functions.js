var actualRow = null;
/*
 * This variable contains the actual textfield to search classes 
 */
var actualTextClasses = null;
/*
 * This variable contains the actual textfield to search properties 
 */
var actualTextProperties = null;
/*
 * This contains the reference to actual column of selector to add a selector
 */
var actualColSelector = null;
/*
 * This variable contains the actual element to select the value of the actual property
 */
var actualSelector = null;
/*
 * This variable contains the actual combobox to select a class 
 */
var actualComboClasses = null;
/*
 * This variable contains the actual combobox to select a property 
 */
var actualComboProperties = null;
/*
 * This variable contains the actual bt to add new sentences to the query
 */
var actualBtAdd = null;
/*
 * This variable contains the last selector obtained from wesearch
 */
var lastSelector = null;
/*
 * This variable contains the last query generated by wesearch
 */
var lastQuery = null;
/*
 * This function has to extract the value introduce by the user in the 
 * classes' textfield and ask to wesearch for matters with this value
 */
function searchClasses() {
	var stem = $(actualTextClasses).val();
	console.log('Text: ' + stem);
	getMatters(stem, 'bcn');
}

/*
 * This function has to extract the value introduce by the user in the 
 * properties' textfield and ask to wesearch for properties with this value
 */
function searchProperties() {
	var stem = $(actualTextProperties).val();
	console.log('Text: ' + stem);
	var matter = $(actualComboClasses).val();
	console.log('Matter: ' + matter);
	getProperties(matter, stem, 'bcn');
}

/*
 * This function has to extract the class and the property selected by the user in the comboboxes
 * and ask to wesearch for the valueselector
 */
function obtainSelector() {
	var matter = $('.possible-classes').val();
	console.log('Class selected: ' + matter);
	var property = $('.possible-properties').val();
	console.log('Property selected: ' + property);
	getValueSelector(matter, property, 'bcn');
}

/*
 * This function has to extract the class selected by the user in the combobox
 * and charge all its properties in the properties' combo
 */
function changeProperties() {
	var matter = $('.possible-classes').val();
	getProperties(matter, '', 'bcn');
}

/*
 * This function has to extract all values neccesaries to
 * build a query
 */
function create() {
	var matter = $('.possible-classes').val();
	console.log('Class selected: ' + matter);
	var property = $('.possible-properties').val();
	console.log('Property selected: ' + property);
	var value = $('.value').val();
	lastSelector['value'] = value;
	var selector = JSON.stringify(lastSelector);
	console.log('Selector: ' + selector);
	createQuery(matter, property, selector, 'bcn');
}

/*
 * This function has to show the last query generated in the text area
 */
function show() {
	showQuery(lastQuery['query']);
}

function showButtons() {
	var bt_show = $('#bt_show');
	bt_show.show();
	var bt_add = $('.bt_add');
	bt_add.show();
}

/*
 * This function ask wesearch to execute a query
 */
function executeQuery() {
	var queryStr = lastQuery['query'];
	console.log('Primer caracter: ' + queryStr[0]);
	search(queryStr, 'bcn');
}
/*
 * This function fill a given dropdown with the options returned by the 
 * call to wesearch
 */
function fillDropdowns(combo, data) {
	$(data).each(function() {
		var option = $('<option />');
		option.attr('value', JSON.stringify(this)).text(this.label);
		
		combo.append(option);
	});
}

/*
 * This function creates and adds a new class selector
 */
function createClassesDropdown(data) {
	var row = createSecondRow();
	var column = $('<td />');
	var combo = actualComboClasses = $('<select />');
	fillDropdowns(combo, data);
	column.append(combo);
	row.append(column);
	$('#clauses').append(row);
} 

/*
 * This function creates and adds a new property selector
 */
function createPropertyDropdown(data) {
	var column = $('<td />');
	var combo = actualComboProperties = $('<select />');
	fillDropdowns(combo, data);
	column.append(combo);
	actualRow.append(column);
	$('#clauses').append(actualRow);
}

/*
 * This function has to add a textfield to introduce the value for a property
 */
function addTextfield() {
	var td = $('.selector');
	td.append('<input type="text" class="value" />');
	var bt = $('#bt_create');
	bt.show();
}

/*
 * This function has to add a combobox to select one value for a object property
 */
function addCombobox() {
	var td = $('.selector');
	td.append('<select class="combo_selector"></select>');
	var select = $('.combo_selector');
	console.log('Values: ' + JSON.stringify(lastSelector['value']));
	console.log('Array of values: ' + (lastSelector['value'])['value']);
	var classes = (lastSelector['value'])['value'];
	$(classes).each(function() {
		var option = $('<option />')
		option.attr('value', JSON.stringify(this)).text(this.label);
		
		select.append(option);
	});
	
	select.change(function() {
		var selection = $(this).val();
		console.log('Selection: ' + selection);
	});
}

/*
 * This function has to add to the table a new input to the introduce the value
 * of a property
 */
function addSelectorInput(selector) {
	$('.selector').empty();
	var type = selector['type'];
	console.log('Type: ' + type);
	switch (type) {
		case 'textfield':
			addTextfield();
		break;
		case 'numeric':
			addTextfield();
		break;
		case 'undefined':
			addTextfield();
		break;
		case 'object':
			addCombobox();
		break;
	}
}

/*
 * This function has to show the query generated in the text area
 */
function showQuery(query) {
	var textarea = $('#queryText');
	textarea.empty();
	textarea.text(query);
	var btExecute= $('#bt_execute');
	btExecute.show();
}

/*
 * This function has to add 2 new rows to the table
 */
function addClauseRows() {
	var table = $('#clauses');
	console.log('Table: ' + table);
	var row1 = createFirstRow();
	table.append(row1);	
	/*var row2 = createSecondRow();
	table.append(row2);*/
}

function createSecondRow() {
	var tr = $('<tr />');
	/*var column1 = addForthColumn();
	var column2 = addFifthColumn();
	var column3 = addSixthColumn();
	tr.append(column1);
	tr.append(column2);
	tr.append(column3);*/
	actualRow = tr;
	return tr;
}

/*
 * This function has to add the firs row that contains the textfield to search classes and properties
 */
function createFirstRow() {
	var tr = $('<tr />');
	var column1 = addFirstColumn();
	var column2 = addSecondColumn();
	var column3 = addThirdColumn();
	tr.append(column1);
	tr.append(column2);
	tr.append(column3);
	actualRow = tr;
	return tr;
}

function addFirstColumn() {
	var td = $('<td />');
	var input = $('<input type="text" class="classes" onchange="searchClasses()" />');
	actualTextClasses = input;
	td.append(input);
	return td;
}

function addSecondColumn() {
	var td = $('<td />');
	var input = $('<input type="text" class="properties" onchange="searchProperties()" />');
	actualTextProperties = input;
	td.append(input);
	return td;
}

function addThirdColumn() {
	var td = $('<td class="selector"/>');
	actualColSelector = td;
	return td;
}

function addForthColumn() {
	var td = $('<td />');
	var select = $('<select class="possible-classes" onchange="changeProperties()"/>');
	td.append(select);
	return td;
}

function addFifthColumn() {
	var td = $('<td />');
	var select = $('<select class="possible-properties" onchange="obtainSelector()"/>');
	td.append(select);
	return td;
}

function addSixthColumn() {
	var td = $('<td />');
	return td;
}
